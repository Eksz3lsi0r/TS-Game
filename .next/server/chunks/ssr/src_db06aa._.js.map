{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/Map.tsx"],"sourcesContent":["import { Box } from \"@react-three/drei\";\r\nimport { RigidBody } from \"@react-three/rapier\";\r\n\r\nexport default function Map() {\r\n  return (\r\n    <>\r\n      <RigidBody type=\"fixed\" name=\"floor\" friction={1.5}>\r\n        <Box\r\n          position={[0, 0, 0]}\r\n          args={[10, 1, 10]}\r\n          material-color=\"springgreen\"\r\n        />\r\n      </RigidBody>\r\n    </>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;AAGe,SAAS;IACtB,qBACE;kBACE,cAAA,wPAAC,qMAAA,CAAA,YAAS;YAAC,MAAK;YAAQ,MAAK;YAAQ,UAAU;sBAC7C,cAAA,wPAAC,0JAAA,CAAA,MAAG;gBACF,UAAU;oBAAC;oBAAG;oBAAG;iBAAE;gBACnB,MAAM;oBAAC;oBAAI;oBAAG;iBAAG;gBACjB,kBAAe;;;;;;;;;;;;AAKzB"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/Character.tsx"],"sourcesContent":["import { Box } from \"@react-three/drei\";\r\nimport {\r\n  RigidBody,\r\n  RapierRigidBody,\r\n  CollisionTarget,\r\n} from \"@react-three/rapier\";\r\nimport { MutableRefObject, useRef } from \"react\";\r\n\r\nexport default function Character({\r\n  myref,\r\n  onFloor,\r\n}: Readonly<{\r\n  myref: MutableRefObject<RapierRigidBody>;\r\n  onFloor: MutableRefObject<boolean>;\r\n}>) {\r\n  return (\r\n    <>\r\n      <RigidBody\r\n        position={[-2.5, 1, 0]}\r\n        ref={myref}\r\n        onCollisionEnter={({ other }) => {\r\n          if (other.rigidBodyObject?.name === \"floor\") {\r\n            onFloor.current = true;\r\n          }\r\n        }}\r\n        onCollisionExit={({ other }) => {\r\n          if (other.rigidBodyObject?.name === \"floor\") {\r\n            onFloor.current = false;\r\n          }\r\n        }}\r\n      >\r\n        <Box material-color=\"blue\" />\r\n      </RigidBody>\r\n    </>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;AAQe,SAAS,UAAU,EAChC,KAAK,EACL,OAAO,EAIP;IACA,qBACE;kBACE,cAAA,wPAAC,qMAAA,CAAA,YAAS;YACR,UAAU;gBAAC,CAAC;gBAAK;gBAAG;aAAE;YACtB,KAAK;YACL,kBAAkB,CAAC,EAAE,KAAK,EAAE;gBAC1B,IAAI,MAAM,eAAe,EAAE,SAAS,SAAS;oBAC3C,QAAQ,OAAO,GAAG;gBACpB;YACF;YACA,iBAAiB,CAAC,EAAE,KAAK,EAAE;gBACzB,IAAI,MAAM,eAAe,EAAE,SAAS,SAAS;oBAC3C,QAAQ,OAAO,GAAG;gBACpB;YACF;sBAEA,cAAA,wPAAC,0JAAA,CAAA,MAAG;gBAAC,kBAAe;;;;;;;;;;;;AAI5B"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/Expirience.tsx"],"sourcesContent":["import { Box, OrbitControls, useKeyboardControls } from \"@react-three/drei\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { RigidBody, RapierRigidBody } from \"@react-three/rapier\";\r\nimport { useRef, useState } from \"react\";\r\nimport { Controls } from \"./Scene\";\r\nimport Map from \"./Map\";\r\nimport Character from \"./Character\";\r\n\r\nexport default function Expirience() {\r\n  const isOnFloor = useRef(true);\r\n  const box = useRef<RapierRigidBody>(null!);\r\n  const leftPress = useKeyboardControls<Controls>((state) => state.left);\r\n  const rightPress = useKeyboardControls<Controls>((state) => state.right);\r\n  const forwardPress = useKeyboardControls<Controls>((state) => state.forward);\r\n  const backPress = useKeyboardControls<Controls>((state) => state.back);\r\n  const jumpPress = useKeyboardControls<Controls>((state) => state.jump);\r\n  const leftMobile = document.getElementById(\"left\");\r\n  const rightMobile = document.getElementById(\"right\");\r\n  const forwardMobile = document.getElementById(\"forward\");\r\n  const backMobile = document.getElementById(\"back\");\r\n  const jumpMobile = document.getElementById(\"jump\");\r\n  const jump = () => {\r\n    if (isOnFloor.current) {\r\n      box.current.applyImpulse({ x: 0, y: 5, z: 0 }, true);\r\n      isOnFloor.current = false;\r\n    }\r\n  };\r\n  const handleMovement = () => {\r\n    if (rightPress) box.current.applyImpulse({ x: 0.2, y: 0, z: 0 }, true);\r\n    if (leftPress) box.current.applyImpulse({ x: -0.2, y: 0, z: 0 }, true);\r\n    if (forwardPress) box.current.applyImpulse({ x: 0, y: 0, z: -0.2 }, true);\r\n    if (backPress) box.current.applyImpulse({ x: 0, y: 0, z: 0.2 }, true);\r\n    leftMobile?.addEventListener(\"click\", () => {\r\n      box.current.applyImpulse({ x: -0.05, y: 0, z: 0 }, true);\r\n    });\r\n    rightMobile?.addEventListener(\"click\", () => {\r\n      box.current.applyImpulse({ x: 0.05, y: 0, z: 0 }, true);\r\n    });\r\n    forwardMobile?.addEventListener(\"click\", () => {\r\n      box.current.applyImpulse({ x: 0, y: 0, z: -0.05 }, true);\r\n    });\r\n    backMobile?.addEventListener(\"click\", () => {\r\n      box.current.applyImpulse({ x: 0, y: 0, z: 0.05 }, true);\r\n    });\r\n  };\r\n\r\n  useFrame((_state, delta) => {\r\n    if (jumpPress) jump();\r\n    jumpMobile?.addEventListener(\"click\", jump);\r\n    handleMovement();\r\n  });\r\n  return (\r\n    <>\r\n      <ambientLight intensity={0.5} />\r\n      <OrbitControls />\r\n      <Character myref={box} onFloor={isOnFloor} />\r\n\r\n      <Map />\r\n    </>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAQe,SAAS;IACtB,MAAM,YAAY,CAAA,GAAA,+MAAA,CAAA,SAAM,AAAD,EAAE;IACzB,MAAM,MAAM,CAAA,GAAA,+MAAA,CAAA,SAAM,AAAD,EAAmB;IACpC,MAAM,YAAY,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAY,CAAC,QAAU,MAAM,IAAI;IACrE,MAAM,aAAa,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAY,CAAC,QAAU,MAAM,KAAK;IACvE,MAAM,eAAe,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAY,CAAC,QAAU,MAAM,OAAO;IAC3E,MAAM,YAAY,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAY,CAAC,QAAU,MAAM,IAAI;IACrE,MAAM,YAAY,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAY,CAAC,QAAU,MAAM,IAAI;IACrE,MAAM,aAAa,SAAS,cAAc,CAAC;IAC3C,MAAM,cAAc,SAAS,cAAc,CAAC;IAC5C,MAAM,gBAAgB,SAAS,cAAc,CAAC;IAC9C,MAAM,aAAa,SAAS,cAAc,CAAC;IAC3C,MAAM,aAAa,SAAS,cAAc,CAAC;IAC3C,MAAM,OAAO;QACX,IAAI,UAAU,OAAO,EAAE;YACrB,IAAI,OAAO,CAAC,YAAY,CAAC;gBAAE,GAAG;gBAAG,GAAG;gBAAG,GAAG;YAAE,GAAG;YAC/C,UAAU,OAAO,GAAG;QACtB;IACF;IACA,MAAM,iBAAiB;QACrB,IAAI,YAAY,IAAI,OAAO,CAAC,YAAY,CAAC;YAAE,GAAG;YAAK,GAAG;YAAG,GAAG;QAAE,GAAG;QACjE,IAAI,WAAW,IAAI,OAAO,CAAC,YAAY,CAAC;YAAE,GAAG,CAAC;YAAK,GAAG;YAAG,GAAG;QAAE,GAAG;QACjE,IAAI,cAAc,IAAI,OAAO,CAAC,YAAY,CAAC;YAAE,GAAG;YAAG,GAAG;YAAG,GAAG,CAAC;QAAI,GAAG;QACpE,IAAI,WAAW,IAAI,OAAO,CAAC,YAAY,CAAC;YAAE,GAAG;YAAG,GAAG;YAAG,GAAG;QAAI,GAAG;QAChE,YAAY,iBAAiB,SAAS;YACpC,IAAI,OAAO,CAAC,YAAY,CAAC;gBAAE,GAAG,CAAC;gBAAM,GAAG;gBAAG,GAAG;YAAE,GAAG;QACrD;QACA,aAAa,iBAAiB,SAAS;YACrC,IAAI,OAAO,CAAC,YAAY,CAAC;gBAAE,GAAG;gBAAM,GAAG;gBAAG,GAAG;YAAE,GAAG;QACpD;QACA,eAAe,iBAAiB,SAAS;YACvC,IAAI,OAAO,CAAC,YAAY,CAAC;gBAAE,GAAG;gBAAG,GAAG;gBAAG,GAAG,CAAC;YAAK,GAAG;QACrD;QACA,YAAY,iBAAiB,SAAS;YACpC,IAAI,OAAO,CAAC,YAAY,CAAC;gBAAE,GAAG;gBAAG,GAAG;gBAAG,GAAG;YAAK,GAAG;QACpD;IACF;IAEA,CAAA,GAAA,8MAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,QAAQ;QAChB,IAAI,WAAW;QACf,YAAY,iBAAiB,SAAS;QACtC;IACF;IACA,qBACE;;0BACE,wPAAC;gBAAa,WAAW;;;;;;0BACzB,wPAAC,iKAAA,CAAA,gBAAa;;;;;0BACd,wPAAC,+HAAA,CAAA,UAAS;gBAAC,OAAO;gBAAK,SAAS;;;;;;0BAEhC,wPAAC,yHAAA,CAAA,UAAG;;;;;;;AAGV"}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/Scene.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { KeyboardControls, KeyboardControlsEntry } from \"@react-three/drei\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { Physics } from \"@react-three/rapier\";\r\nimport { Suspense } from \"react\";\r\nimport { useMemo } from \"react\";\r\nimport Expirience from \"./Expirience\";\r\n\r\nexport enum Controls {\r\n    forward = 'forward',\r\n    back = 'back',\r\n    left = 'left',\r\n    right = 'right',\r\n    jump = 'jump',\r\n}\r\n\r\nexport default function Scene() {\r\n\r\n    const mapControls = useMemo<KeyboardControlsEntry<Controls>[]>(() => [\r\n        { name: Controls.forward, keys: ['ArrowUp', 'KeyW'] },\r\n        { name: Controls.back, keys: ['ArrowDown', 'KeyS'] },\r\n        { name: Controls.left, keys: ['ArrowLeft', 'KeyA'] },\r\n        { name: Controls.right, keys: ['ArrowRight', 'KeyD'] },\r\n        { name: Controls.jump, keys: ['Space'] },   \r\n    ], [])\r\n\r\n  return (\r\n    <KeyboardControls map={mapControls}>\r\n      <Canvas shadows camera={{position: [10,10,10], fov: 30}}>\r\n        <color attach=\"background\" args={[\"#ececec\"]}/>\r\n        <Suspense>\r\n          <Physics debug>\r\n            <Expirience/>\r\n          </Physics>\r\n        </Suspense>\r\n      </Canvas>\r\n      </KeyboardControls>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;UASY;;;;;;GAAA,aAAA;AAQG,SAAS;IAEpB,MAAM,cAAc,CAAA,GAAA,+MAAA,CAAA,UAAO,AAAD,EAAqC,IAAM;YACjE;gBAAE,IAAI;gBAAoB,MAAM;oBAAC;oBAAW;iBAAO;YAAC;YACpD;gBAAE,IAAI;gBAAiB,MAAM;oBAAC;oBAAa;iBAAO;YAAC;YACnD;gBAAE,IAAI;gBAAiB,MAAM;oBAAC;oBAAa;iBAAO;YAAC;YACnD;gBAAE,IAAI;gBAAkB,MAAM;oBAAC;oBAAc;iBAAO;YAAC;YACrD;gBAAE,IAAI;gBAAiB,MAAM;oBAAC;iBAAQ;YAAC;SAC1C,EAAE,EAAE;IAEP,qBACE,wPAAC,mKAAA,CAAA,mBAAgB;QAAC,KAAK;kBACrB,cAAA,wPAAC,mMAAA,CAAA,SAAM;YAAC,OAAO;YAAC,QAAQ;gBAAC,UAAU;oBAAC;oBAAG;oBAAG;iBAAG;gBAAE,KAAK;YAAE;;8BACpD,wPAAC;oBAAM,QAAO;oBAAa,MAAM;wBAAC;qBAAU;;;;;;8BAC5C,wPAAC,+MAAA,CAAA,WAAQ;8BACP,cAAA,wPAAC,qMAAA,CAAA,UAAO;wBAAC,KAAK;kCACZ,cAAA,wPAAC,gIAAA,CAAA,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;AAMvB"}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}