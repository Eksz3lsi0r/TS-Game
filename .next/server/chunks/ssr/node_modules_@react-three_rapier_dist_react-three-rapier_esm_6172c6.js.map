{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@react-three/rapier/dist/react-three-rapier.esm.js"],"sourcesContent":["import { Vector3 as Vector3$1, Quaternion as Quaternion$1, ActiveEvents, ColliderDesc, EventQueue, RigidBodyDesc } from '@dimforge/rapier3d-compat';\nexport { CoefficientCombineRule, Collider as RapierCollider, RigidBody as RapierRigidBody } from '@dimforge/rapier3d-compat';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport React, { useRef, useEffect, memo, useMemo, useContext, useState, createContext, useCallback, forwardRef, Fragment } from 'react';\nimport { Quaternion, Euler, Vector3, Object3D, Matrix4, BufferAttribute, MathUtils, DynamicDrawUsage } from 'three';\nimport { useAsset } from 'use-asset';\nimport { mergeVertices } from 'three-stdlib';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst _quaternion = new Quaternion();\nnew Euler();\nconst _vector3 = new Vector3();\nnew Object3D();\nconst _matrix4 = new Matrix4();\nconst _position = new Vector3();\nconst _rotation = new Quaternion();\nconst _scale = new Vector3();\n\nconst vectorArrayToVector3 = arr => {\n  const [x, y, z] = arr;\n  return new Vector3(x, y, z);\n};\nconst rapierQuaternionToQuaternion = ({\n  x,\n  y,\n  z,\n  w\n}) => _quaternion.set(x, y, z, w);\nconst vector3ToRapierVector = v => {\n  if (Array.isArray(v)) {\n    return new Vector3$1(v[0], v[1], v[2]);\n  } else if (typeof v === \"number\") {\n    return new Vector3$1(v, v, v);\n  } else {\n    const threeVector3 = v;\n    return new Vector3$1(threeVector3.x, threeVector3.y, threeVector3.z);\n  }\n};\nconst quaternionToRapierQuaternion = v => {\n  if (Array.isArray(v)) {\n    return new Quaternion$1(v[0], v[1], v[2], v[3]);\n  } else {\n    return new Quaternion$1(v.x, v.y, v.z, v.w);\n  }\n};\nconst rigidBodyTypeMap = {\n  fixed: 1,\n  dynamic: 0,\n  kinematicPosition: 2,\n  kinematicVelocity: 3\n};\nconst rigidBodyTypeFromString = type => rigidBodyTypeMap[type];\nconst scaleVertices = (vertices, scale) => {\n  const scaledVerts = Array.from(vertices);\n\n  for (let i = 0; i < vertices.length / 3; i++) {\n    scaledVerts[i * 3] *= scale.x;\n    scaledVerts[i * 3 + 1] *= scale.y;\n    scaledVerts[i * 3 + 2] *= scale.z;\n  }\n\n  return scaledVerts;\n};\nconst vectorToTuple = v => {\n  if (!v) return [0];\n\n  if (v instanceof Quaternion) {\n    return [v.x, v.y, v.z, v.w];\n  }\n\n  if (v instanceof Vector3 || v instanceof Euler) {\n    return [v.x, v.y, v.z];\n  }\n\n  if (Array.isArray(v)) {\n    return v;\n  }\n\n  return [v];\n};\nfunction useConst(initialValue) {\n  const ref = useRef();\n\n  if (ref.current === undefined) {\n    ref.current = {\n      value: typeof initialValue === \"function\" ? initialValue() : initialValue\n    };\n  }\n\n  return ref.current.value;\n}\n\nconst useRaf = callback => {\n  const cb = useRef(callback);\n  const raf = useRef(0);\n  const lastFrame = useRef(0);\n  useEffect(() => {\n    cb.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    const loop = () => {\n      const now = performance.now();\n      const delta = now - lastFrame.current;\n      raf.current = requestAnimationFrame(loop);\n      cb.current(delta / 1000);\n      lastFrame.current = now;\n    };\n\n    raf.current = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(raf.current);\n  }, []);\n};\n\nconst UseFrameStepper = ({\n  onStep,\n  updatePriority\n}) => {\n  useFrame((_, dt) => {\n    onStep(dt);\n  }, updatePriority);\n  return null;\n};\n\nconst RafStepper = ({\n  onStep\n}) => {\n  useRaf(dt => {\n    onStep(dt);\n  });\n  return null;\n};\n\nconst FrameStepper = ({\n  onStep,\n  type,\n  updatePriority\n}) => {\n  return type === \"independent\" ? /*#__PURE__*/React.createElement(RafStepper, {\n    onStep: onStep\n  }) : /*#__PURE__*/React.createElement(UseFrameStepper, {\n    onStep: onStep,\n    updatePriority: updatePriority\n  });\n};\n\nvar FrameStepper$1 = /*#__PURE__*/memo(FrameStepper);\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nconst _excluded$2 = [\"mass\", \"linearDamping\", \"angularDamping\", \"type\", \"onCollisionEnter\", \"onCollisionExit\", \"onIntersectionEnter\", \"onIntersectionExit\", \"onContactForce\", \"children\", \"canSleep\", \"ccd\", \"gravityScale\"];\nconst scaleColliderArgs = (shape, args, scale) => {\n  const newArgs = args.slice(); // Heightfield uses a vector\n\n  if (shape === \"heightfield\") {\n    const s = newArgs[3];\n    s.x *= scale.x;\n    s.x *= scale.y;\n    s.x *= scale.z;\n    return newArgs;\n  } // Trimesh and convex scale the vertices\n\n\n  if (shape === \"trimesh\" || shape === \"convexHull\") {\n    newArgs[0] = scaleVertices(newArgs[0], scale);\n    return newArgs;\n  } // Prepfill with some extra\n\n\n  const scaleArray = [scale.x, scale.y, scale.z, scale.x, scale.x];\n  return newArgs.map((arg, index) => scaleArray[index] * arg);\n};\nconst createColliderFromOptions = (options, world, scale, getRigidBody) => {\n  const scaledArgs = scaleColliderArgs(options.shape, options.args, scale); // @ts-ignore\n\n  const desc = ColliderDesc[options.shape](...scaledArgs);\n  return world.createCollider(desc, getRigidBody === null || getRigidBody === void 0 ? void 0 : getRigidBody());\n};\nconst immutableColliderOptions = [\"shape\", \"args\"];\nconst massPropertiesConflictError = \"Please pick ONLY ONE of the `density`, `mass` and `massProperties` options.\";\n\nconst setColliderMassOptions = (collider, options) => {\n  if (options.density !== undefined) {\n    if (options.mass !== undefined || options.massProperties !== undefined) {\n      throw new Error(massPropertiesConflictError);\n    }\n\n    collider.setDensity(options.density);\n    return;\n  }\n\n  if (options.mass !== undefined) {\n    if (options.massProperties !== undefined) {\n      throw new Error(massPropertiesConflictError);\n    }\n\n    collider.setMass(options.mass);\n    return;\n  }\n\n  if (options.massProperties !== undefined) {\n    collider.setMassProperties(options.massProperties.mass, options.massProperties.centerOfMass, options.massProperties.principalAngularInertia, options.massProperties.angularInertiaLocalFrame);\n  }\n};\n\nconst mutableColliderOptions = {\n  sensor: (collider, value) => {\n    collider.setSensor(value);\n  },\n  collisionGroups: (collider, value) => {\n    collider.setCollisionGroups(value);\n  },\n  solverGroups: (collider, value) => {\n    collider.setSolverGroups(value);\n  },\n  friction: (collider, value) => {\n    collider.setFriction(value);\n  },\n  frictionCombineRule: (collider, value) => {\n    collider.setFrictionCombineRule(value);\n  },\n  restitution: (collider, value) => {\n    collider.setRestitution(value);\n  },\n  restitutionCombineRule: (collider, value) => {\n    collider.setRestitutionCombineRule(value);\n  },\n  // To make sure the options all mutable options are listed\n  quaternion: () => {},\n  position: () => {},\n  rotation: () => {},\n  scale: () => {}\n};\nconst mutableColliderOptionKeys = Object.keys(mutableColliderOptions);\nconst setColliderOptions = (collider, options, states) => {\n  const state = states.get(collider.handle);\n\n  if (state) {\n    var _state$worldParent;\n\n    // Update collider position based on the object's position\n    const parentWorldScale = state.object.parent.getWorldScale(_vector3);\n    const parentInvertedWorldMatrix = (_state$worldParent = state.worldParent) === null || _state$worldParent === void 0 ? void 0 : _state$worldParent.matrixWorld.clone().invert();\n    state.object.updateWorldMatrix(true, false);\n\n    _matrix4.copy(state.object.matrixWorld);\n\n    if (parentInvertedWorldMatrix) {\n      _matrix4.premultiply(parentInvertedWorldMatrix);\n    }\n\n    _matrix4.decompose(_position, _rotation, _scale);\n\n    if (collider.parent()) {\n      collider.setTranslationWrtParent({\n        x: _position.x * parentWorldScale.x,\n        y: _position.y * parentWorldScale.y,\n        z: _position.z * parentWorldScale.z\n      });\n      collider.setRotationWrtParent(_rotation);\n    } else {\n      collider.setTranslation({\n        x: _position.x * parentWorldScale.x,\n        y: _position.y * parentWorldScale.y,\n        z: _position.z * parentWorldScale.z\n      });\n      collider.setRotation(_rotation);\n    }\n\n    mutableColliderOptionKeys.forEach(key => {\n      if (key in options) {\n        const option = options[key];\n        mutableColliderOptions[key](collider, // @ts-ignore Option does not want to fit into the function, but it will\n        option, options);\n      }\n    }); // handle mass separately, because the assignments\n    // are exclusive.\n\n    setColliderMassOptions(collider, options);\n  }\n};\nconst useUpdateColliderOptions = (getCollider, props, states) => {\n  // TODO: Improve this, split each prop into its own effect\n  const mutablePropsAsFlatArray = useMemo(() => mutableColliderOptionKeys.flatMap(key => {\n    return vectorToTuple(props[key]);\n  }), [props]);\n  useEffect(() => {\n    const collider = getCollider();\n    setColliderOptions(collider, props, states);\n  }, [...mutablePropsAsFlatArray, getCollider]);\n};\n\nconst isChildOfMeshCollider = child => {\n  let flag = false;\n  child.traverseAncestors(a => {\n    if (a.userData.r3RapierType === \"MeshCollider\") flag = true;\n  });\n  return flag;\n};\n\nconst createColliderState = (collider, object, rigidBodyObject) => {\n  return {\n    collider,\n    worldParent: rigidBodyObject || undefined,\n    object\n  };\n};\nconst autoColliderMap = {\n  cuboid: \"cuboid\",\n  ball: \"ball\",\n  hull: \"convexHull\",\n  trimesh: \"trimesh\"\n};\nconst createColliderPropsFromChildren = ({\n  object,\n  ignoreMeshColliders: _ignoreMeshColliders = true,\n  options\n}) => {\n  const childColliderProps = [];\n  object.updateWorldMatrix(true, false);\n  const invertedParentMatrixWorld = object.matrixWorld.clone().invert();\n\n  const colliderFromChild = child => {\n    if (\"isMesh\" in child) {\n      if (_ignoreMeshColliders && isChildOfMeshCollider(child)) return;\n      const worldScale = child.getWorldScale(_scale);\n      const shape = autoColliderMap[options.colliders || \"cuboid\"];\n      child.updateWorldMatrix(true, false);\n\n      _matrix4.copy(child.matrixWorld).premultiply(invertedParentMatrixWorld).decompose(_position, _rotation, _scale);\n\n      const rotationEuler = new Euler().setFromQuaternion(_rotation, \"XYZ\");\n      const {\n        geometry\n      } = child;\n      const {\n        args,\n        offset\n      } = getColliderArgsFromGeometry(geometry, options.colliders || \"cuboid\");\n\n      const colliderProps = _objectSpread2(_objectSpread2({}, cleanRigidBodyPropsForCollider(options)), {}, {\n        args: args,\n        shape: shape,\n        rotation: [rotationEuler.x, rotationEuler.y, rotationEuler.z],\n        position: [_position.x + offset.x * worldScale.x, _position.y + offset.y * worldScale.y, _position.z + offset.z * worldScale.z],\n        scale: [worldScale.x, worldScale.y, worldScale.z]\n      });\n\n      childColliderProps.push(colliderProps);\n    }\n  };\n\n  if (options.includeInvisible) {\n    object.traverse(colliderFromChild);\n  } else {\n    object.traverseVisible(colliderFromChild);\n  }\n\n  return childColliderProps;\n};\nconst getColliderArgsFromGeometry = (geometry, colliders) => {\n  switch (colliders) {\n    case \"cuboid\":\n      {\n        geometry.computeBoundingBox();\n        const {\n          boundingBox\n        } = geometry;\n        const size = boundingBox.getSize(new Vector3());\n        return {\n          args: [size.x / 2, size.y / 2, size.z / 2],\n          offset: boundingBox.getCenter(new Vector3())\n        };\n      }\n\n    case \"ball\":\n      {\n        geometry.computeBoundingSphere();\n        const {\n          boundingSphere\n        } = geometry;\n        const radius = boundingSphere.radius;\n        return {\n          args: [radius],\n          offset: boundingSphere.center\n        };\n      }\n\n    case \"trimesh\":\n      {\n        var _clonedGeometry$index;\n\n        const clonedGeometry = geometry.index ? geometry.clone() : mergeVertices(geometry);\n        return {\n          args: [clonedGeometry.attributes.position.array, (_clonedGeometry$index = clonedGeometry.index) === null || _clonedGeometry$index === void 0 ? void 0 : _clonedGeometry$index.array],\n          offset: new Vector3()\n        };\n      }\n\n    case \"hull\":\n      {\n        const g = geometry.clone();\n        return {\n          args: [g.attributes.position.array],\n          offset: new Vector3()\n        };\n      }\n  }\n\n  return {\n    args: [],\n    offset: new Vector3()\n  };\n};\nconst getActiveCollisionEventsFromProps = props => {\n  return {\n    collision: !!(props !== null && props !== void 0 && props.onCollisionEnter || props !== null && props !== void 0 && props.onCollisionExit || props !== null && props !== void 0 && props.onIntersectionEnter || props !== null && props !== void 0 && props.onIntersectionExit),\n    contactForce: !!(props !== null && props !== void 0 && props.onContactForce)\n  };\n};\nconst useColliderEvents = (getCollider, props, events,\n/**\n * The RigidBody can pass down active events to the collider without attaching the event listners\n */\nactiveEvents = {}) => {\n  const {\n    onCollisionEnter,\n    onCollisionExit,\n    onIntersectionEnter,\n    onIntersectionExit,\n    onContactForce\n  } = props;\n  useEffect(() => {\n    const collider = getCollider();\n\n    if (collider) {\n      const {\n        collision: collisionEventsActive,\n        contactForce: contactForceEventsActive\n      } = getActiveCollisionEventsFromProps(props);\n      const hasCollisionEvent = collisionEventsActive || activeEvents.collision;\n      const hasContactForceEvent = contactForceEventsActive || activeEvents.contactForce;\n\n      if (hasCollisionEvent && hasContactForceEvent) {\n        collider.setActiveEvents(ActiveEvents.COLLISION_EVENTS | ActiveEvents.CONTACT_FORCE_EVENTS);\n      } else if (hasCollisionEvent) {\n        collider.setActiveEvents(ActiveEvents.COLLISION_EVENTS);\n      } else if (hasContactForceEvent) {\n        collider.setActiveEvents(ActiveEvents.CONTACT_FORCE_EVENTS);\n      }\n\n      events.set(collider.handle, {\n        onCollisionEnter,\n        onCollisionExit,\n        onIntersectionEnter,\n        onIntersectionExit,\n        onContactForce\n      });\n    }\n\n    return () => {\n      if (collider) {\n        events.delete(collider.handle);\n      }\n    };\n  }, [onCollisionEnter, onCollisionExit, onIntersectionEnter, onIntersectionExit, onContactForce, activeEvents]);\n};\nconst cleanRigidBodyPropsForCollider = (props = {}) => {\n  const rest = _objectWithoutProperties(props, _excluded$2);\n\n  return rest;\n};\n\nconst useMutableCallback = fn => {\n  const ref = useRef(fn);\n  useEffect(() => {\n    ref.current = fn;\n  }, [fn]);\n  return ref;\n}; // External hooks\n\n/**\n * Exposes the Rapier context, and world\n * @category Hooks\n */\n\n\nconst useRapier = () => {\n  const rapier = useContext(rapierContext);\n  if (!rapier) throw new Error(\"react-three-rapier: useRapier must be used within <Physics />!\");\n  return rapier;\n};\n/**\n * Registers a callback to be called before the physics step\n * @category Hooks\n */\n\nconst useBeforePhysicsStep = callback => {\n  const {\n    beforeStepCallbacks\n  } = useRapier();\n  const ref = useMutableCallback(callback);\n  useEffect(() => {\n    beforeStepCallbacks.add(ref);\n    return () => {\n      beforeStepCallbacks.delete(ref);\n    };\n  }, []);\n};\n/**\n * Registers a callback to be called after the physics step\n * @category Hooks\n */\n\nconst useAfterPhysicsStep = callback => {\n  const {\n    afterStepCallbacks\n  } = useRapier();\n  const ref = useMutableCallback(callback);\n  useEffect(() => {\n    afterStepCallbacks.add(ref);\n    return () => {\n      afterStepCallbacks.delete(ref);\n    };\n  }, []);\n}; // Internal hooks\n\n/**\n * @internal\n */\n\nconst useChildColliderProps = (ref, options, ignoreMeshColliders = true) => {\n  const [colliderProps, setColliderProps] = useState([]);\n  useEffect(() => {\n    const object = ref.current;\n\n    if (object && options.colliders !== false) {\n      setColliderProps(createColliderPropsFromChildren({\n        object: ref.current,\n        options,\n        ignoreMeshColliders\n      }));\n    }\n  }, [options.colliders]);\n  return colliderProps;\n};\n\nconst Debug = /*#__PURE__*/memo(() => {\n  const {\n    world\n  } = useRapier();\n  const ref = useRef(null);\n  useFrame(() => {\n    const mesh = ref.current;\n    if (!mesh) return;\n    const buffers = world.debugRender();\n    mesh.geometry.setAttribute(\"position\", new BufferAttribute(buffers.vertices, 3));\n    mesh.geometry.setAttribute(\"color\", new BufferAttribute(buffers.colors, 4));\n  });\n  return /*#__PURE__*/React.createElement(\"group\", null, /*#__PURE__*/React.createElement(\"lineSegments\", {\n    ref: ref,\n    frustumCulled: false\n  }, /*#__PURE__*/React.createElement(\"lineBasicMaterial\", {\n    color: 0xffffff,\n    vertexColors: true\n  }), /*#__PURE__*/React.createElement(\"bufferGeometry\", null)));\n});\n\n/**\n * Creates a proxy that will create a singleton instance of the given class\n * when a property is accessed, and not before.\n *\n * @returns A proxy and a reset function, so that the instance can created again\n */\nconst createSingletonProxy = createInstance => {\n  let instance;\n  const handler = {\n    get(target, prop) {\n      if (!instance) {\n        instance = createInstance();\n      }\n\n      return Reflect.get(instance, prop);\n    },\n\n    set(target, prop, value) {\n      if (!instance) {\n        instance = createInstance();\n      }\n\n      return Reflect.set(instance, prop, value);\n    }\n\n  };\n  const proxy = new Proxy({}, handler);\n\n  const reset = () => {\n    instance = undefined;\n  };\n\n  const set = newInstance => {\n    instance = newInstance;\n  };\n  /**\n   * Return the proxy and a reset function\n   */\n\n\n  return {\n    proxy,\n    reset,\n    set\n  };\n};\n\nconst rapierContext = /*#__PURE__*/createContext(undefined);\n\nconst getCollisionPayloadFromSource = (target, other) => {\n  var _target$collider$stat, _target$rigidBody$sta, _other$collider$state, _other$rigidBody$stat, _other$collider$state2, _other$rigidBody$stat2;\n\n  return {\n    target: {\n      rigidBody: target.rigidBody.object,\n      collider: target.collider.object,\n      colliderObject: (_target$collider$stat = target.collider.state) === null || _target$collider$stat === void 0 ? void 0 : _target$collider$stat.object,\n      rigidBodyObject: (_target$rigidBody$sta = target.rigidBody.state) === null || _target$rigidBody$sta === void 0 ? void 0 : _target$rigidBody$sta.object\n    },\n    other: {\n      rigidBody: other.rigidBody.object,\n      collider: other.collider.object,\n      colliderObject: (_other$collider$state = other.collider.state) === null || _other$collider$state === void 0 ? void 0 : _other$collider$state.object,\n      rigidBodyObject: (_other$rigidBody$stat = other.rigidBody.state) === null || _other$rigidBody$stat === void 0 ? void 0 : _other$rigidBody$stat.object\n    },\n    rigidBody: other.rigidBody.object,\n    collider: other.collider.object,\n    colliderObject: (_other$collider$state2 = other.collider.state) === null || _other$collider$state2 === void 0 ? void 0 : _other$collider$state2.object,\n    rigidBodyObject: (_other$rigidBody$stat2 = other.rigidBody.state) === null || _other$rigidBody$stat2 === void 0 ? void 0 : _other$rigidBody$stat2.object\n  };\n};\n\nconst importRapier = async () => {\n  let r = await import('@dimforge/rapier3d-compat');\n  await r.init();\n  return r;\n};\n\n/**\n * The main physics component used to create a physics world.\n * @category Components\n */\nconst Physics = props => {\n  const {\n    colliders = \"cuboid\",\n    children,\n    timeStep = 1 / 60,\n    paused = false,\n    interpolate = true,\n    updatePriority,\n    updateLoop = \"follow\",\n    debug = false,\n    gravity = [0, -9.81, 0],\n    allowedLinearError = 0.001,\n    predictionDistance = 0.002,\n    numSolverIterations = 4,\n    numAdditionalFrictionIterations = 4,\n    numInternalPgsIterations = 1,\n    minIslandSize = 128,\n    maxCcdSubsteps = 1,\n    erp = 0.8\n  } = props;\n  const rapier = useAsset(importRapier);\n  const {\n    invalidate\n  } = useThree();\n  const rigidBodyStates = useConst(() => new Map());\n  const colliderStates = useConst(() => new Map());\n  const rigidBodyEvents = useConst(() => new Map());\n  const colliderEvents = useConst(() => new Map());\n  const eventQueue = useConst(() => new EventQueue(false));\n  const beforeStepCallbacks = useConst(() => new Set());\n  const afterStepCallbacks = useConst(() => new Set());\n  /**\n   * Initiate the world\n   * This creates a singleton proxy, so that the world is only created when\n   * something within it is accessed.\n   */\n\n  const {\n    proxy: worldProxy,\n    reset: resetWorldProxy,\n    set: setWorldProxy\n  } = useConst(() => createSingletonProxy(() => new rapier.World(vectorArrayToVector3(gravity))));\n  useEffect(() => {\n    return () => {\n      worldProxy.free();\n      resetWorldProxy();\n    };\n  }, []); // Update mutable props\n\n  useEffect(() => {\n    worldProxy.gravity = vector3ToRapierVector(gravity);\n    worldProxy.integrationParameters.numSolverIterations = numSolverIterations;\n    worldProxy.integrationParameters.numAdditionalFrictionIterations = numAdditionalFrictionIterations;\n    worldProxy.integrationParameters.numInternalPgsIterations = numInternalPgsIterations;\n    worldProxy.integrationParameters.allowedLinearError = allowedLinearError;\n    worldProxy.integrationParameters.minIslandSize = minIslandSize;\n    worldProxy.integrationParameters.maxCcdSubsteps = maxCcdSubsteps;\n    worldProxy.integrationParameters.predictionDistance = predictionDistance;\n    worldProxy.integrationParameters.erp = erp;\n  }, [worldProxy, ...gravity, numSolverIterations, numAdditionalFrictionIterations, numInternalPgsIterations, allowedLinearError, minIslandSize, maxCcdSubsteps, predictionDistance, erp]);\n  const getSourceFromColliderHandle = useCallback(handle => {\n    var _collider$parent;\n\n    const collider = worldProxy.getCollider(handle);\n    const colEvents = colliderEvents.get(handle);\n    const colliderState = colliderStates.get(handle);\n    const rigidBodyHandle = collider === null || collider === void 0 ? void 0 : (_collider$parent = collider.parent()) === null || _collider$parent === void 0 ? void 0 : _collider$parent.handle;\n    const rigidBody = rigidBodyHandle !== undefined ? worldProxy.getRigidBody(rigidBodyHandle) : undefined;\n    const rbEvents = rigidBody && rigidBodyHandle !== undefined ? rigidBodyEvents.get(rigidBodyHandle) : undefined;\n    const rigidBodyState = rigidBodyHandle !== undefined ? rigidBodyStates.get(rigidBodyHandle) : undefined;\n    const source = {\n      collider: {\n        object: collider,\n        events: colEvents,\n        state: colliderState\n      },\n      rigidBody: {\n        object: rigidBody,\n        events: rbEvents,\n        state: rigidBodyState\n      }\n    };\n    return source;\n  }, []);\n  const [steppingState] = useState({\n    previousState: {},\n    accumulator: 0\n  });\n  const step = useCallback(dt => {\n    const world = worldProxy;\n    /* Check if the timestep is supposed to be variable. We'll do this here\n      once so we don't have to string-check every frame. */\n\n    const timeStepVariable = timeStep === \"vary\";\n    /**\n     * Fixed timeStep simulation progression\n     * @see https://gafferongames.com/post/fix_your_timestep/\n     */\n\n    const clampedDelta = MathUtils.clamp(dt, 0, 0.5);\n\n    const stepWorld = delta => {\n      // Trigger beforeStep callbacks\n      beforeStepCallbacks.forEach(callback => {\n        callback.current(world);\n      });\n      world.timestep = delta;\n      world.step(eventQueue); // Trigger afterStep callbacks\n\n      afterStepCallbacks.forEach(callback => {\n        callback.current(world);\n      });\n    };\n\n    if (timeStepVariable) {\n      stepWorld(clampedDelta);\n    } else {\n      // don't step time forwards if paused\n      // Increase accumulator\n      steppingState.accumulator += clampedDelta;\n\n      while (steppingState.accumulator >= timeStep) {\n        // Set up previous state\n        // needed for accurate interpolations if the world steps more than once\n        if (interpolate) {\n          steppingState.previousState = {};\n          world.forEachRigidBody(body => {\n            steppingState.previousState[body.handle] = {\n              position: body.translation(),\n              rotation: body.rotation()\n            };\n          });\n        }\n\n        stepWorld(timeStep);\n        steppingState.accumulator -= timeStep;\n      }\n    }\n\n    const interpolationAlpha = timeStepVariable || !interpolate || paused ? 1 : steppingState.accumulator / timeStep; // Update meshes\n\n    rigidBodyStates.forEach((state, handle) => {\n      const rigidBody = world.getRigidBody(handle);\n      const events = rigidBodyEvents.get(handle);\n\n      if (events !== null && events !== void 0 && events.onSleep || events !== null && events !== void 0 && events.onWake) {\n        if (rigidBody.isSleeping() && !state.isSleeping) {\n          var _events$onSleep;\n\n          events === null || events === void 0 ? void 0 : (_events$onSleep = events.onSleep) === null || _events$onSleep === void 0 ? void 0 : _events$onSleep.call(events);\n        }\n\n        if (!rigidBody.isSleeping() && state.isSleeping) {\n          var _events$onWake;\n\n          events === null || events === void 0 ? void 0 : (_events$onWake = events.onWake) === null || _events$onWake === void 0 ? void 0 : _events$onWake.call(events);\n        }\n\n        state.isSleeping = rigidBody.isSleeping();\n      }\n\n      if (!rigidBody || rigidBody.isSleeping() && !(\"isInstancedMesh\" in state.object) || !state.setMatrix) {\n        return;\n      } // New states\n\n\n      let t = rigidBody.translation();\n      let r = rigidBody.rotation();\n      let previousState = steppingState.previousState[handle];\n\n      if (previousState) {\n        // Get previous simulated world position\n        _matrix4.compose(previousState.position, rapierQuaternionToQuaternion(previousState.rotation), state.scale).premultiply(state.invertedWorldMatrix).decompose(_position, _rotation, _scale); // Apply previous tick position\n\n\n        if (state.meshType == \"mesh\") {\n          state.object.position.copy(_position);\n          state.object.quaternion.copy(_rotation);\n        }\n      } // Get new position\n\n\n      _matrix4.compose(t, rapierQuaternionToQuaternion(r), state.scale).premultiply(state.invertedWorldMatrix).decompose(_position, _rotation, _scale);\n\n      if (state.meshType == \"instancedMesh\") {\n        state.setMatrix(_matrix4);\n      } else {\n        // Interpolate to new position\n        state.object.position.lerp(_position, interpolationAlpha);\n        state.object.quaternion.slerp(_rotation, interpolationAlpha);\n      }\n    });\n    eventQueue.drainCollisionEvents((handle1, handle2, started) => {\n      const source1 = getSourceFromColliderHandle(handle1);\n      const source2 = getSourceFromColliderHandle(handle2); // Collision Events\n\n      if (!(source1 !== null && source1 !== void 0 && source1.collider.object) || !(source2 !== null && source2 !== void 0 && source2.collider.object)) {\n        return;\n      }\n\n      const collisionPayload1 = getCollisionPayloadFromSource(source1, source2);\n      const collisionPayload2 = getCollisionPayloadFromSource(source2, source1);\n\n      if (started) {\n        world.contactPair(source1.collider.object, source2.collider.object, (manifold, flipped) => {\n          var _source1$rigidBody$ev, _source1$rigidBody$ev2, _source2$rigidBody$ev, _source2$rigidBody$ev2, _source1$collider$eve, _source1$collider$eve2, _source2$collider$eve, _source2$collider$eve2;\n\n          /* RigidBody events */\n          (_source1$rigidBody$ev = source1.rigidBody.events) === null || _source1$rigidBody$ev === void 0 ? void 0 : (_source1$rigidBody$ev2 = _source1$rigidBody$ev.onCollisionEnter) === null || _source1$rigidBody$ev2 === void 0 ? void 0 : _source1$rigidBody$ev2.call(_source1$rigidBody$ev, _objectSpread2(_objectSpread2({}, collisionPayload1), {}, {\n            manifold,\n            flipped\n          }));\n          (_source2$rigidBody$ev = source2.rigidBody.events) === null || _source2$rigidBody$ev === void 0 ? void 0 : (_source2$rigidBody$ev2 = _source2$rigidBody$ev.onCollisionEnter) === null || _source2$rigidBody$ev2 === void 0 ? void 0 : _source2$rigidBody$ev2.call(_source2$rigidBody$ev, _objectSpread2(_objectSpread2({}, collisionPayload2), {}, {\n            manifold,\n            flipped\n          }));\n          /* Collider events */\n\n          (_source1$collider$eve = source1.collider.events) === null || _source1$collider$eve === void 0 ? void 0 : (_source1$collider$eve2 = _source1$collider$eve.onCollisionEnter) === null || _source1$collider$eve2 === void 0 ? void 0 : _source1$collider$eve2.call(_source1$collider$eve, _objectSpread2(_objectSpread2({}, collisionPayload1), {}, {\n            manifold,\n            flipped\n          }));\n          (_source2$collider$eve = source2.collider.events) === null || _source2$collider$eve === void 0 ? void 0 : (_source2$collider$eve2 = _source2$collider$eve.onCollisionEnter) === null || _source2$collider$eve2 === void 0 ? void 0 : _source2$collider$eve2.call(_source2$collider$eve, _objectSpread2(_objectSpread2({}, collisionPayload2), {}, {\n            manifold,\n            flipped\n          }));\n        });\n      } else {\n        var _source1$rigidBody$ev3, _source1$rigidBody$ev4, _source2$rigidBody$ev3, _source2$rigidBody$ev4, _source1$collider$eve3, _source1$collider$eve4, _source2$collider$eve3, _source2$collider$eve4;\n\n        (_source1$rigidBody$ev3 = source1.rigidBody.events) === null || _source1$rigidBody$ev3 === void 0 ? void 0 : (_source1$rigidBody$ev4 = _source1$rigidBody$ev3.onCollisionExit) === null || _source1$rigidBody$ev4 === void 0 ? void 0 : _source1$rigidBody$ev4.call(_source1$rigidBody$ev3, collisionPayload1);\n        (_source2$rigidBody$ev3 = source2.rigidBody.events) === null || _source2$rigidBody$ev3 === void 0 ? void 0 : (_source2$rigidBody$ev4 = _source2$rigidBody$ev3.onCollisionExit) === null || _source2$rigidBody$ev4 === void 0 ? void 0 : _source2$rigidBody$ev4.call(_source2$rigidBody$ev3, collisionPayload2);\n        (_source1$collider$eve3 = source1.collider.events) === null || _source1$collider$eve3 === void 0 ? void 0 : (_source1$collider$eve4 = _source1$collider$eve3.onCollisionExit) === null || _source1$collider$eve4 === void 0 ? void 0 : _source1$collider$eve4.call(_source1$collider$eve3, collisionPayload1);\n        (_source2$collider$eve3 = source2.collider.events) === null || _source2$collider$eve3 === void 0 ? void 0 : (_source2$collider$eve4 = _source2$collider$eve3.onCollisionExit) === null || _source2$collider$eve4 === void 0 ? void 0 : _source2$collider$eve4.call(_source2$collider$eve3, collisionPayload2);\n      } // Sensor Intersections\n\n\n      if (started) {\n        if (world.intersectionPair(source1.collider.object, source2.collider.object)) {\n          var _source1$rigidBody$ev5, _source1$rigidBody$ev6, _source2$rigidBody$ev5, _source2$rigidBody$ev6, _source1$collider$eve5, _source1$collider$eve6, _source2$collider$eve5, _source2$collider$eve6;\n\n          (_source1$rigidBody$ev5 = source1.rigidBody.events) === null || _source1$rigidBody$ev5 === void 0 ? void 0 : (_source1$rigidBody$ev6 = _source1$rigidBody$ev5.onIntersectionEnter) === null || _source1$rigidBody$ev6 === void 0 ? void 0 : _source1$rigidBody$ev6.call(_source1$rigidBody$ev5, collisionPayload1);\n          (_source2$rigidBody$ev5 = source2.rigidBody.events) === null || _source2$rigidBody$ev5 === void 0 ? void 0 : (_source2$rigidBody$ev6 = _source2$rigidBody$ev5.onIntersectionEnter) === null || _source2$rigidBody$ev6 === void 0 ? void 0 : _source2$rigidBody$ev6.call(_source2$rigidBody$ev5, collisionPayload2);\n          (_source1$collider$eve5 = source1.collider.events) === null || _source1$collider$eve5 === void 0 ? void 0 : (_source1$collider$eve6 = _source1$collider$eve5.onIntersectionEnter) === null || _source1$collider$eve6 === void 0 ? void 0 : _source1$collider$eve6.call(_source1$collider$eve5, collisionPayload1);\n          (_source2$collider$eve5 = source2.collider.events) === null || _source2$collider$eve5 === void 0 ? void 0 : (_source2$collider$eve6 = _source2$collider$eve5.onIntersectionEnter) === null || _source2$collider$eve6 === void 0 ? void 0 : _source2$collider$eve6.call(_source2$collider$eve5, collisionPayload2);\n        }\n      } else {\n        var _source1$rigidBody$ev7, _source1$rigidBody$ev8, _source2$rigidBody$ev7, _source2$rigidBody$ev8, _source1$collider$eve7, _source1$collider$eve8, _source2$collider$eve7, _source2$collider$eve8;\n\n        (_source1$rigidBody$ev7 = source1.rigidBody.events) === null || _source1$rigidBody$ev7 === void 0 ? void 0 : (_source1$rigidBody$ev8 = _source1$rigidBody$ev7.onIntersectionExit) === null || _source1$rigidBody$ev8 === void 0 ? void 0 : _source1$rigidBody$ev8.call(_source1$rigidBody$ev7, collisionPayload1);\n        (_source2$rigidBody$ev7 = source2.rigidBody.events) === null || _source2$rigidBody$ev7 === void 0 ? void 0 : (_source2$rigidBody$ev8 = _source2$rigidBody$ev7.onIntersectionExit) === null || _source2$rigidBody$ev8 === void 0 ? void 0 : _source2$rigidBody$ev8.call(_source2$rigidBody$ev7, collisionPayload2);\n        (_source1$collider$eve7 = source1.collider.events) === null || _source1$collider$eve7 === void 0 ? void 0 : (_source1$collider$eve8 = _source1$collider$eve7.onIntersectionExit) === null || _source1$collider$eve8 === void 0 ? void 0 : _source1$collider$eve8.call(_source1$collider$eve7, collisionPayload1);\n        (_source2$collider$eve7 = source2.collider.events) === null || _source2$collider$eve7 === void 0 ? void 0 : (_source2$collider$eve8 = _source2$collider$eve7.onIntersectionExit) === null || _source2$collider$eve8 === void 0 ? void 0 : _source2$collider$eve8.call(_source2$collider$eve7, collisionPayload2);\n      }\n    });\n    eventQueue.drainContactForceEvents(event => {\n      var _source1$rigidBody$ev9, _source1$rigidBody$ev10, _source2$rigidBody$ev9, _source2$rigidBody$ev10, _source1$collider$eve9, _source1$collider$eve10, _source2$collider$eve9, _source2$collider$eve10;\n\n      const source1 = getSourceFromColliderHandle(event.collider1());\n      const source2 = getSourceFromColliderHandle(event.collider2()); // Collision Events\n\n      if (!(source1 !== null && source1 !== void 0 && source1.collider.object) || !(source2 !== null && source2 !== void 0 && source2.collider.object)) {\n        return;\n      }\n\n      const collisionPayload1 = getCollisionPayloadFromSource(source1, source2);\n      const collisionPayload2 = getCollisionPayloadFromSource(source2, source1);\n      (_source1$rigidBody$ev9 = source1.rigidBody.events) === null || _source1$rigidBody$ev9 === void 0 ? void 0 : (_source1$rigidBody$ev10 = _source1$rigidBody$ev9.onContactForce) === null || _source1$rigidBody$ev10 === void 0 ? void 0 : _source1$rigidBody$ev10.call(_source1$rigidBody$ev9, _objectSpread2(_objectSpread2({}, collisionPayload1), {}, {\n        totalForce: event.totalForce(),\n        totalForceMagnitude: event.totalForceMagnitude(),\n        maxForceDirection: event.maxForceDirection(),\n        maxForceMagnitude: event.maxForceMagnitude()\n      }));\n      (_source2$rigidBody$ev9 = source2.rigidBody.events) === null || _source2$rigidBody$ev9 === void 0 ? void 0 : (_source2$rigidBody$ev10 = _source2$rigidBody$ev9.onContactForce) === null || _source2$rigidBody$ev10 === void 0 ? void 0 : _source2$rigidBody$ev10.call(_source2$rigidBody$ev9, _objectSpread2(_objectSpread2({}, collisionPayload2), {}, {\n        totalForce: event.totalForce(),\n        totalForceMagnitude: event.totalForceMagnitude(),\n        maxForceDirection: event.maxForceDirection(),\n        maxForceMagnitude: event.maxForceMagnitude()\n      }));\n      (_source1$collider$eve9 = source1.collider.events) === null || _source1$collider$eve9 === void 0 ? void 0 : (_source1$collider$eve10 = _source1$collider$eve9.onContactForce) === null || _source1$collider$eve10 === void 0 ? void 0 : _source1$collider$eve10.call(_source1$collider$eve9, _objectSpread2(_objectSpread2({}, collisionPayload1), {}, {\n        totalForce: event.totalForce(),\n        totalForceMagnitude: event.totalForceMagnitude(),\n        maxForceDirection: event.maxForceDirection(),\n        maxForceMagnitude: event.maxForceMagnitude()\n      }));\n      (_source2$collider$eve9 = source2.collider.events) === null || _source2$collider$eve9 === void 0 ? void 0 : (_source2$collider$eve10 = _source2$collider$eve9.onContactForce) === null || _source2$collider$eve10 === void 0 ? void 0 : _source2$collider$eve10.call(_source2$collider$eve9, _objectSpread2(_objectSpread2({}, collisionPayload2), {}, {\n        totalForce: event.totalForce(),\n        totalForceMagnitude: event.totalForceMagnitude(),\n        maxForceDirection: event.maxForceDirection(),\n        maxForceMagnitude: event.maxForceMagnitude()\n      }));\n    });\n    world.forEachActiveRigidBody(() => {\n      invalidate();\n    });\n  }, [paused, timeStep, interpolate, worldProxy]);\n  const context = useMemo(() => ({\n    rapier,\n    world: worldProxy,\n    setWorld: world => {\n      setWorldProxy(world);\n    },\n    physicsOptions: {\n      colliders,\n      gravity\n    },\n    rigidBodyStates,\n    colliderStates,\n    rigidBodyEvents,\n    colliderEvents,\n    beforeStepCallbacks,\n    afterStepCallbacks,\n    isPaused: paused,\n    isDebug: debug,\n    step\n  }), [paused, step, debug, colliders, gravity]);\n  const stepCallback = useCallback(delta => {\n    if (!paused) {\n      step(delta);\n    }\n  }, [paused, step]);\n  return /*#__PURE__*/React.createElement(rapierContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(FrameStepper$1, {\n    onStep: stepCallback,\n    type: updateLoop,\n    updatePriority: updatePriority\n  }), debug && /*#__PURE__*/React.createElement(Debug, null), children);\n};\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * Initiate an instance and return a safe getter\n */\n\nconst useImperativeInstance = (createFn, destroyFn, dependencyList) => {\n  const ref = useRef();\n  const getInstance = useCallback(() => {\n    if (!ref.current) {\n      ref.current = createFn();\n    }\n\n    return ref.current;\n  }, dependencyList);\n  useEffect(() => {\n    // Save the destroy function and instance\n    const instance = getInstance();\n\n    const destroy = () => destroyFn(instance);\n\n    return () => {\n      destroy();\n      ref.current = undefined;\n    };\n  }, [getInstance]);\n  return getInstance;\n};\n\n/**\n * Takes an object resembling a Vector3 and returs a Three.Vector3\n * @category Math helpers\n */\n\nconst vec3 = ({\n  x,\n  y,\n  z\n} = {\n  x: 0,\n  y: 0,\n  z: 0\n}) => {\n  return new Vector3(x, y, z);\n};\n/**\n * Takes an object resembling a Quaternion and returs a Three.Quaternion\n * @category Math helpers\n */\n\nconst quat = ({\n  x,\n  y,\n  z,\n  w\n} = {\n  x: 0,\n  y: 0,\n  z: 0,\n  w: 1\n}) => {\n  return new Quaternion(x, y, z, w);\n};\n/**\n * Takes an object resembling an Euler and returs a Three.Euler\n * @category Math helpers\n */\n\nconst euler = ({\n  x,\n  y,\n  z\n} = {\n  x: 0,\n  y: 0,\n  z: 0\n}) => {\n  return new Euler(x, y, z);\n};\n\nconst useForwardedRef = (forwardedRef, defaultValue = null) => {\n  const innerRef = useRef(defaultValue); // Update the forwarded ref when the inner ref changes\n\n  if (forwardedRef && typeof forwardedRef !== \"function\") {\n    if (!forwardedRef.current) {\n      forwardedRef.current = innerRef.current;\n    }\n\n    return forwardedRef;\n  }\n\n  return innerRef;\n};\n\n/**\n * A collider is a shape that can be attached to a rigid body to define its physical properties.\n * @internal\n */\nconst AnyCollider = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    position,\n    rotation,\n    quaternion,\n    scale,\n    name\n  } = props;\n  const {\n    world,\n    colliderEvents,\n    colliderStates\n  } = useRapier();\n  const rigidBodyContext = useRigidBodyContext();\n  const colliderRef = useForwardedRef(forwardedRef);\n  const objectRef = useRef(null); // We spread the props out here to make sure that the ref is updated when the props change.\n\n  const immutablePropArray = immutableColliderOptions.flatMap(key => Array.isArray(props[key]) ? [...props[key]] : props[key]);\n  const getInstance = useImperativeInstance(() => {\n    const worldScale = objectRef.current.getWorldScale(vec3());\n    const collider = createColliderFromOptions(props, world, worldScale, rigidBodyContext === null || rigidBodyContext === void 0 ? void 0 : rigidBodyContext.getRigidBody);\n\n    if (typeof forwardedRef == \"function\") {\n      forwardedRef(collider);\n    }\n\n    colliderRef.current = collider;\n    return collider;\n  }, collider => {\n    if (world.getCollider(collider.handle)) {\n      world.removeCollider(collider, true);\n    }\n  }, [...immutablePropArray, rigidBodyContext]);\n  useEffect(() => {\n    const collider = getInstance();\n    colliderStates.set(collider.handle, createColliderState(collider, objectRef.current, rigidBodyContext === null || rigidBodyContext === void 0 ? void 0 : rigidBodyContext.ref.current));\n    return () => {\n      colliderStates.delete(collider.handle);\n    };\n  }, [getInstance]);\n  const mergedProps = useMemo(() => {\n    return _objectSpread2(_objectSpread2({}, cleanRigidBodyPropsForCollider(rigidBodyContext === null || rigidBodyContext === void 0 ? void 0 : rigidBodyContext.options)), props);\n  }, [props, rigidBodyContext === null || rigidBodyContext === void 0 ? void 0 : rigidBodyContext.options]);\n  useUpdateColliderOptions(getInstance, mergedProps, colliderStates);\n  useColliderEvents(getInstance, mergedProps, colliderEvents, getActiveCollisionEventsFromProps(rigidBodyContext === null || rigidBodyContext === void 0 ? void 0 : rigidBodyContext.options));\n  return /*#__PURE__*/React.createElement(\"object3D\", {\n    position: position,\n    rotation: rotation,\n    quaternion: quaternion,\n    scale: scale,\n    ref: objectRef,\n    name: name\n  }, children);\n}));\n\n/**\n * A cuboid collider shape\n * @category Colliders\n */\nconst CuboidCollider = /*#__PURE__*/React.forwardRef((props, ref) => {\n  return /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n    shape: \"cuboid\",\n    ref: ref\n  }));\n});\nCuboidCollider.displayName = \"CuboidCollider\";\n\n/**\n * A round cuboid collider shape\n * @category Colliders\n */\nconst RoundCuboidCollider = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n  shape: \"roundCuboid\",\n  ref: ref\n})));\nRoundCuboidCollider.displayName = \"RoundCuboidCollider\";\n\n/**\n * A ball collider shape\n * @category Colliders\n */\nconst BallCollider = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n  shape: \"ball\",\n  ref: ref\n})));\nBallCollider.displayName = \"BallCollider\";\n\n/**\n * A capsule collider shape\n * @category Colliders\n */\nconst CapsuleCollider = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n  shape: \"capsule\",\n  ref: ref\n})));\nCapsuleCollider.displayName = \"CapsuleCollider\";\n\n/**\n * A heightfield collider shape\n * @category Colliders\n */\nconst HeightfieldCollider = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n  shape: \"heightfield\",\n  ref: ref\n})));\nHeightfieldCollider.displayName = \"HeightfieldCollider\";\n\n/**\n * A trimesh collider shape\n * @category Colliders\n */\nconst TrimeshCollider = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n  shape: \"trimesh\",\n  ref: ref\n})));\nTrimeshCollider.displayName = \"TrimeshCollider\";\n\n/**\n * A cone collider shape\n * @category Colliders\n */\nconst ConeCollider = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n  shape: \"cone\",\n  ref: ref\n})));\nConeCollider.displayName = \"ConeCollider\";\n\n/**\n * A round cylinder collider shape\n * @category Colliders\n */\nconst RoundConeCollider = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n  shape: \"roundCone\",\n  ref: ref\n})));\nRoundConeCollider.displayName = \"RoundConeCollider\";\n\n/**\n * A cylinder collider shape\n * @category Colliders\n */\nconst CylinderCollider = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n  shape: \"cylinder\",\n  ref: ref\n})));\nCylinderCollider.displayName = \"CylinderCollider\";\n\n/**\n * A round cylinder collider shape\n * @category Colliders\n */\nconst RoundCylinderCollider = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n  shape: \"roundCylinder\",\n  ref: ref\n})));\nCylinderCollider.displayName = \"RoundCylinderCollider\";\n\n/**\n * A convex hull collider shape\n * @category Colliders\n */\nconst ConvexHullCollider = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(AnyCollider, _extends({}, props, {\n  shape: \"convexHull\",\n  ref: ref\n})));\nConvexHullCollider.displayName = \"ConvexHullCollider\";\n\nconst rigidBodyDescFromOptions = options => {\n  var _options$canSleep;\n\n  const type = rigidBodyTypeFromString((options === null || options === void 0 ? void 0 : options.type) || \"dynamic\");\n  const desc = new RigidBodyDesc(type); // Apply immutable options\n\n  desc.canSleep = (_options$canSleep = options === null || options === void 0 ? void 0 : options.canSleep) !== null && _options$canSleep !== void 0 ? _options$canSleep : true;\n  return desc;\n};\nconst createRigidBodyState = ({\n  rigidBody,\n  object,\n  setMatrix,\n  getMatrix,\n  worldScale,\n  meshType: _meshType = \"mesh\"\n}) => {\n  object.updateWorldMatrix(true, false);\n  const invertedWorldMatrix = object.parent.matrixWorld.clone().invert();\n  return {\n    object,\n    rigidBody,\n    invertedWorldMatrix,\n    setMatrix: setMatrix ? setMatrix : matrix => {\n      object.matrix.copy(matrix);\n    },\n    getMatrix: getMatrix ? getMatrix : matrix => matrix.copy(object.matrix),\n    scale: worldScale || object.getWorldScale(_scale).clone(),\n    isSleeping: false,\n    meshType: _meshType\n  };\n};\nconst immutableRigidBodyOptions = [\"args\", \"colliders\", \"canSleep\"];\nconst mutableRigidBodyOptions = {\n  gravityScale: (rb, value) => {\n    rb.setGravityScale(value, true);\n  },\n\n  additionalSolverIterations(rb, value) {\n    rb.setAdditionalSolverIterations(value);\n  },\n\n  linearDamping: (rb, value) => {\n    rb.setLinearDamping(value);\n  },\n  angularDamping: (rb, value) => {\n    rb.setAngularDamping(value);\n  },\n  dominanceGroup: (rb, value) => {\n    rb.setDominanceGroup(value);\n  },\n  enabledRotations: (rb, [x, y, z]) => {\n    rb.setEnabledRotations(x, y, z, true);\n  },\n  enabledTranslations: (rb, [x, y, z]) => {\n    rb.setEnabledTranslations(x, y, z, true);\n  },\n  lockRotations: (rb, value) => {\n    rb.lockRotations(value, true);\n  },\n  lockTranslations: (rb, value) => {\n    rb.lockTranslations(value, true);\n  },\n  angularVelocity: (rb, [x, y, z]) => {\n    rb.setAngvel({\n      x,\n      y,\n      z\n    }, true);\n  },\n  linearVelocity: (rb, [x, y, z]) => {\n    rb.setLinvel({\n      x,\n      y,\n      z\n    }, true);\n  },\n  ccd: (rb, value) => {\n    rb.enableCcd(value);\n  },\n  userData: (rb, value) => {\n    rb.userData = value;\n  },\n\n  type(rb, value) {\n    rb.setBodyType(rigidBodyTypeFromString(value), true);\n  },\n\n  position: () => {},\n  rotation: () => {},\n  quaternion: () => {},\n  scale: () => {}\n};\nconst mutableRigidBodyOptionKeys = Object.keys(mutableRigidBodyOptions);\nconst setRigidBodyOptions = (rigidBody, options, states, updateTranslations = true) => {\n  if (!rigidBody) {\n    return;\n  }\n\n  const state = states.get(rigidBody.handle);\n\n  if (state) {\n    if (updateTranslations) {\n      state.object.updateWorldMatrix(true, false);\n\n      _matrix4.copy(state.object.matrixWorld).decompose(_position, _rotation, _scale);\n\n      rigidBody.setTranslation(_position, false);\n      rigidBody.setRotation(_rotation, false);\n    }\n\n    mutableRigidBodyOptionKeys.forEach(key => {\n      if (key in options) {\n        mutableRigidBodyOptions[key](rigidBody, options[key]);\n      }\n    });\n  }\n};\nconst useUpdateRigidBodyOptions = (getRigidBody, props, states, updateTranslations = true) => {\n  // TODO: Improve this, split each prop into its own effect\n  const mutablePropsAsFlatArray = useMemo(() => mutableRigidBodyOptionKeys.flatMap(key => {\n    return vectorToTuple(props[key]);\n  }), [props]);\n  useEffect(() => {\n    const rigidBody = getRigidBody();\n    setRigidBodyOptions(rigidBody, props, states, updateTranslations);\n  }, mutablePropsAsFlatArray);\n};\nconst useRigidBodyEvents = (getRigidBody, props, events) => {\n  const {\n    onWake,\n    onSleep,\n    onCollisionEnter,\n    onCollisionExit,\n    onIntersectionEnter,\n    onIntersectionExit,\n    onContactForce\n  } = props;\n  const eventHandlers = {\n    onWake,\n    onSleep,\n    onCollisionEnter,\n    onCollisionExit,\n    onIntersectionEnter,\n    onIntersectionExit,\n    onContactForce\n  };\n  useEffect(() => {\n    const rigidBody = getRigidBody();\n    events.set(rigidBody.handle, eventHandlers);\n    return () => {\n      events.delete(rigidBody.handle);\n    };\n  }, [onWake, onSleep, onCollisionEnter, onCollisionExit, onIntersectionEnter, onIntersectionExit, onContactForce]);\n};\n\nconst _excluded$1 = [\"children\", \"type\", \"position\", \"rotation\", \"scale\", \"quaternion\", \"transformState\"];\nconst RigidBodyContext = /*#__PURE__*/createContext(undefined);\nconst useRigidBodyContext = () => useContext(RigidBodyContext);\n\n/**\n * A rigid body is a physical object that can be simulated by the physics engine.\n * @category Components\n */\nconst RigidBody = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    type,\n    position,\n    rotation,\n    scale,\n    quaternion,\n    transformState\n  } = props,\n        objectProps = _objectWithoutProperties(props, _excluded$1);\n\n  const objectRef = useRef(null);\n  const rigidBodyRef = useForwardedRef(forwardedRef);\n  const {\n    world,\n    rigidBodyStates,\n    physicsOptions,\n    rigidBodyEvents\n  } = useRapier();\n  const mergedOptions = useMemo(() => {\n    return _objectSpread2(_objectSpread2(_objectSpread2({}, physicsOptions), props), {}, {\n      children: undefined\n    });\n  }, [physicsOptions, props]);\n  const immutablePropArray = immutableRigidBodyOptions.flatMap(key => {\n    return Array.isArray(mergedOptions[key]) ? [...mergedOptions[key]] : mergedOptions[key];\n  });\n  const childColliderProps = useChildColliderProps(objectRef, mergedOptions); // Provide a way to eagerly create rigidbody\n\n  const getRigidBody = useImperativeInstance(() => {\n    const desc = rigidBodyDescFromOptions(mergedOptions);\n    const rigidBody = world.createRigidBody(desc);\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(rigidBody);\n    }\n\n    rigidBodyRef.current = rigidBody;\n    return rigidBody;\n  }, rigidBody => {\n    if (world.getRigidBody(rigidBody.handle)) {\n      world.removeRigidBody(rigidBody);\n    }\n  }, immutablePropArray); // Only provide a object state after the ref has been set\n\n  useEffect(() => {\n    const rigidBody = getRigidBody();\n    const state = createRigidBodyState({\n      rigidBody,\n      object: objectRef.current\n    });\n    rigidBodyStates.set(rigidBody.handle, props.transformState ? props.transformState(state) : state);\n    return () => {\n      rigidBodyStates.delete(rigidBody.handle);\n    };\n  }, [getRigidBody]);\n  useUpdateRigidBodyOptions(getRigidBody, mergedOptions, rigidBodyStates);\n  useRigidBodyEvents(getRigidBody, mergedOptions, rigidBodyEvents);\n  const contextValue = useMemo(() => {\n    return {\n      ref: objectRef,\n      getRigidBody: getRigidBody,\n      options: mergedOptions\n    };\n  }, [getRigidBody]);\n  return /*#__PURE__*/React.createElement(RigidBodyContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(\"object3D\", _extends({\n    ref: objectRef\n  }, objectProps, {\n    position: position,\n    rotation: rotation,\n    quaternion: quaternion,\n    scale: scale\n  }), children, childColliderProps.map((colliderProps, index) => /*#__PURE__*/React.createElement(AnyCollider, _extends({\n    key: index\n  }, colliderProps)))));\n}));\nRigidBody.displayName = \"RigidBody\";\n\n/**\n * A mesh collider is a collider that is automatically generated from the geometry of the children.\n * @category Colliders\n */\nconst MeshCollider = /*#__PURE__*/memo(props => {\n  const {\n    children,\n    type\n  } = props;\n  const {\n    physicsOptions\n  } = useRapier();\n  const object = useRef(null);\n  const {\n    options\n  } = useRigidBodyContext();\n  const mergedOptions = useMemo(() => {\n    return _objectSpread2(_objectSpread2(_objectSpread2({}, physicsOptions), options), {}, {\n      children: undefined,\n      colliders: type\n    });\n  }, [physicsOptions, options]);\n  const childColliderProps = useChildColliderProps(object, mergedOptions, false);\n  return /*#__PURE__*/React.createElement(\"object3D\", {\n    ref: object,\n    userData: {\n      r3RapierType: \"MeshCollider\"\n    }\n  }, children, childColliderProps.map((colliderProps, index) => /*#__PURE__*/React.createElement(AnyCollider, _extends({\n    key: index\n  }, colliderProps))));\n});\nMeshCollider.displayName = \"MeshCollider\";\n\nconst _excluded = [\"children\", \"instances\", \"colliderNodes\", \"position\", \"rotation\", \"quaternion\", \"scale\"];\nconst InstancedRigidBodies = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((props, forwardedRef) => {\n  const rigidBodiesRef = useForwardedRef(forwardedRef, []);\n  const objectRef = useRef(null);\n  const instanceWrapperRef = useRef(null);\n\n  const {\n    // instanced props\n    children,\n    instances,\n    colliderNodes = [],\n    // wrapper object props\n    position,\n    rotation,\n    quaternion,\n    scale\n  } = props,\n        rigidBodyProps = _objectWithoutProperties(props, _excluded);\n\n  const childColliderProps = useChildColliderProps(objectRef, _objectSpread2(_objectSpread2({}, props), {}, {\n    children: undefined\n  }));\n\n  const getInstancedMesh = () => {\n    const firstChild = instanceWrapperRef.current.children[0];\n\n    if (firstChild && \"isInstancedMesh\" in firstChild) {\n      return firstChild;\n    }\n\n    return undefined;\n  };\n\n  useEffect(() => {\n    const instancedMesh = getInstancedMesh();\n\n    if (instancedMesh) {\n      instancedMesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    } else {\n      console.warn(\"InstancedRigidBodies expects exactly one child, which must be an InstancedMesh\");\n    }\n  }, []); // Update the RigidBodyStates whenever the instances change\n\n  const applyInstancedState = (state, index) => {\n    const instancedMesh = getInstancedMesh();\n\n    if (instancedMesh) {\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        getMatrix: matrix => {\n          instancedMesh.getMatrixAt(index, matrix);\n          return matrix;\n        },\n        setMatrix: matrix => {\n          instancedMesh.setMatrixAt(index, matrix);\n          instancedMesh.instanceMatrix.needsUpdate = true;\n        },\n        meshType: \"instancedMesh\"\n      });\n    }\n\n    return state;\n  };\n\n  return /*#__PURE__*/React.createElement(\"object3D\", _extends({\n    ref: objectRef\n  }, rigidBodyProps, {\n    position: position,\n    rotation: rotation,\n    quaternion: quaternion,\n    scale: scale\n  }), /*#__PURE__*/React.createElement(\"object3D\", {\n    ref: instanceWrapperRef\n  }, children), instances === null || instances === void 0 ? void 0 : instances.map((instance, index) => /*#__PURE__*/React.createElement(RigidBody, _extends({}, rigidBodyProps, instance, {\n    ref: body => rigidBodiesRef.current[index] = body,\n    transformState: state => applyInstancedState(state, index)\n  }), /*#__PURE__*/React.createElement(React.Fragment, null, colliderNodes.map((node, index) => /*#__PURE__*/React.createElement(Fragment, {\n    key: index\n  }, node)), childColliderProps.map((colliderProps, colliderIndex) => /*#__PURE__*/React.createElement(AnyCollider, _extends({\n    key: colliderIndex\n  }, colliderProps)))))));\n}));\nInstancedRigidBodies.displayName = \"InstancedRigidBodies\";\n\n/**\n * @internal\n */\n\nconst useImpulseJoint = (body1, body2, params) => {\n  const {\n    world\n  } = useRapier();\n  const jointRef = useRef();\n  useImperativeInstance(() => {\n    if (body1.current && body2.current) {\n      const newJoint = world.createImpulseJoint(params, body1.current, body2.current, true);\n      jointRef.current = newJoint;\n      return newJoint;\n    }\n  }, joint => {\n    if (joint) {\n      jointRef.current = undefined;\n\n      if (world.getImpulseJoint(joint.handle)) {\n        world.removeImpulseJoint(joint, true);\n      }\n    }\n  }, []);\n  return jointRef;\n};\n/**\n * A fixed joint ensures that two rigid-bodies don't move relative to each other.\n * Fixed joints are characterized by one local frame (represented by an isometry) on each rigid-body.\n * The fixed-joint makes these frames coincide in world-space.\n *\n * @category Hooks - Joints\n */\n\nconst useFixedJoint = (body1, body2, [body1Anchor, body1LocalFrame, body2Anchor, body2LocalFrame]) => {\n  const {\n    rapier\n  } = useRapier();\n  return useImpulseJoint(body1, body2, rapier.JointData.fixed(vector3ToRapierVector(body1Anchor), quaternionToRapierQuaternion(body1LocalFrame), vector3ToRapierVector(body2Anchor), quaternionToRapierQuaternion(body2LocalFrame)));\n};\n/**\n * The spherical joint ensures that two points on the local-spaces of two rigid-bodies always coincide (it prevents any relative\n * translational motion at this points). This is typically used to simulate ragdolls arms, pendulums, etc.\n * They are characterized by one local anchor on each rigid-body. Each anchor represents the location of the\n * points that need to coincide on the local-space of each rigid-body.\n *\n * @category Hooks - Joints\n */\n\nconst useSphericalJoint = (body1, body2, [body1Anchor, body2Anchor]) => {\n  const {\n    rapier\n  } = useRapier();\n  return useImpulseJoint(body1, body2, rapier.JointData.spherical(vector3ToRapierVector(body1Anchor), vector3ToRapierVector(body2Anchor)));\n};\n/**\n * The revolute joint prevents any relative movement between two rigid-bodies, except for relative\n * rotations along one axis. This is typically used to simulate wheels, fans, etc.\n * They are characterized by one local anchor as well as one local axis on each rigid-body.\n *\n * @category Hooks - Joints\n */\n\nconst useRevoluteJoint = (body1, body2, [body1Anchor, body2Anchor, axis, limits]) => {\n  const {\n    rapier\n  } = useRapier();\n  const params = rapier.JointData.revolute(vector3ToRapierVector(body1Anchor), vector3ToRapierVector(body2Anchor), vector3ToRapierVector(axis));\n\n  if (limits) {\n    params.limitsEnabled = true;\n    params.limits = limits;\n  }\n\n  return useImpulseJoint(body1, body2, params);\n};\n/**\n * The prismatic joint prevents any relative movement between two rigid-bodies, except for relative translations along one axis.\n * It is characterized by one local anchor as well as one local axis on each rigid-body. In 3D, an optional\n * local tangent axis can be specified for each rigid-body.\n *\n * @category Hooks - Joints\n */\n\nconst usePrismaticJoint = (body1, body2, [body1Anchor, body2Anchor, axis, limits]) => {\n  const {\n    rapier\n  } = useRapier();\n  const params = rapier.JointData.prismatic(vector3ToRapierVector(body1Anchor), vector3ToRapierVector(body2Anchor), vector3ToRapierVector(axis));\n\n  if (limits) {\n    params.limitsEnabled = true;\n    params.limits = limits;\n  }\n\n  return useImpulseJoint(body1, body2, params);\n};\n/**\n * The rope joint limits the max distance between two bodies.\n * @category Hooks - Joints\n */\n\nconst useRopeJoint = (body1, body2, [body1Anchor, body2Anchor, length]) => {\n  const {\n    rapier\n  } = useRapier();\n  const vBody1Anchor = vector3ToRapierVector(body1Anchor);\n  const vBody2Anchor = vector3ToRapierVector(body2Anchor);\n  const params = rapier.JointData.rope(length, vBody1Anchor, vBody2Anchor);\n  return useImpulseJoint(body1, body2, params);\n};\n/**\n * The spring joint applies a force proportional to the distance between two objects.\n * @category Hooks - Joints\n */\n\nconst useSpringJoint = (body1, body2, [body1Anchor, body2Anchor, restLength, stiffness, damping]) => {\n  const {\n    rapier\n  } = useRapier();\n  const vBody1Anchor = vector3ToRapierVector(body1Anchor);\n  const vBody2Anchor = vector3ToRapierVector(body2Anchor);\n  const params = rapier.JointData.spring(restLength, stiffness, damping, vBody1Anchor, vBody2Anchor);\n  return useImpulseJoint(body1, body2, params);\n};\n\n/**\n * Calculates an InteractionGroup bitmask for use in the `collisionGroups` or `solverGroups`\n * properties of RigidBody or Collider components. The first argument represents a list of\n * groups the entity is in (expressed as numbers from 0 to 15). The second argument is a list\n * of groups that will be filtered against. When it is omitted, all groups are filtered against.\n *\n * @example\n * A RigidBody that is member of group 0 and will collide with everything from groups 0 and 1:\n *\n * ```tsx\n * <RigidBody collisionGroups={interactionGroups([0], [0, 1])} />\n * ```\n *\n * A RigidBody that is member of groups 0 and 1 and will collide with everything else:\n *\n * ```tsx\n * <RigidBody collisionGroups={interactionGroups([0, 1])} />\n * ```\n *\n * A RigidBody that is member of groups 0 and 1 and will not collide with anything:\n *\n * ```tsx\n * <RigidBody collisionGroups={interactionGroups([0, 1], [])} />\n * ```\n *\n * Please note that Rapier needs interaction filters to evaluate to true between _both_ colliding\n * entities for collision events to trigger.\n *\n * @param memberships Groups the collider is a member of. (Values can range from 0 to 15.)\n * @param filters Groups the interaction group should filter against. (Values can range from 0 to 15.)\n * @returns An InteractionGroup bitmask.\n */\nconst interactionGroups = (memberships, filters) => (bitmask(memberships) << 16) + (filters !== undefined ? bitmask(filters) : 0b1111111111111111);\n\nconst bitmask = groups => [groups].flat().reduce((acc, layer) => acc | 1 << layer, 0);\n\nexport { AnyCollider, BallCollider, CapsuleCollider, ConeCollider, ConvexHullCollider, CuboidCollider, CylinderCollider, HeightfieldCollider, InstancedRigidBodies, MeshCollider, Physics, RigidBody, RoundConeCollider, RoundCuboidCollider, RoundCylinderCollider, TrimeshCollider, euler, interactionGroups, quat, useAfterPhysicsStep, useBeforePhysicsStep, useFixedJoint, useImpulseJoint, usePrismaticJoint, useRapier, useRevoluteJoint, useRopeJoint, useSphericalJoint, useSpringJoint, vec3 };\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1652, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}